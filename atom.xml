<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joerg Viola]]></title>
  <link href="http://joergviola.github.com/atom.xml" rel="self"/>
  <link href="http://joergviola.github.com/"/>
  <updated>2012-12-01T13:09:04+01:00</updated>
  <id>http://joergviola.github.com/</id>
  <author>
    <name><![CDATA[Joerg Viola]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Play Meetings 2013]]></title>
    <link href="http://joergviola.github.com/blog/2012/11/30/play-meetings-2013/"/>
    <updated>2012-11-30T08:34:00+01:00</updated>
    <id>http://joergviola.github.com/blog/2012/11/30/play-meetings-2013</id>
    <content type="html"><![CDATA[<p>Is it only me? -
Where can I get a trusted list of all conferences, meetups, events, and beer-drinking
that are relevant to Play, Scala, Akka developpers?</p>

<p>Let&#8217;s gather them here - drop a comment and I&#8217;ll add your event!</p>

<!-- more -->


<ul>
<li><a href="http://www.devoxx.com/display/UK13/Home">Devoxx UK, London, March 26 - 27, 2013</a></li>
<li><a href="http://www.devoxx.fr/display/FR13/Home">Devoxx France, Paris, March 27 - 29, 2013</a></li>
<li><a href="http://jax.de/2013/">JAX, Mainz, April 22 - 26, 2013</a></li>
<li><a href="http://uberconf.com/conference/denver/2013/07/home">Ãœberconf, Denver, July 16 - 19, 2013</a></li>
<li><a href="http://webtechcon.de">WebTech, Mainz, October 13 - 16, 2013</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Page Driven Functional Tests for Play 2.0-Java]]></title>
    <link href="http://joergviola.github.com/blog/2012/06/04/page-driven-functional-tests-for-play-2-dot-0/"/>
    <updated>2012-06-04T20:44:00+02:00</updated>
    <id>http://joergviola.github.com/blog/2012/06/04/page-driven-functional-tests-for-play-2-dot-0</id>
    <content type="html"><![CDATA[<p>I proudly announce the first release (0.1) of funcy, a library for
Page Driven Functional Tests for Play 2.0-Java.</p>

<p><a href="https://github.com/joergviola/funcy">See GitHub for source and docu.</a></p>

<!-- more -->


<p>Functional Tests in Play 2.0 are the best way to test web applications:</p>

<ul>
<li>In standard web applications, you simply do not have really complex business logic. There is no point in using unit tests.</li>
<li>Selenium tests are hard to setup (even with Plays support), require explizit fixtures and they are very slow - too slow to be run before each commit.</li>
</ul>


<p>Example: Booking a ticket is fairly easy: Simply write a row into a database.
Whats the point of writing a unit test for that?</p>

<p>Building the booking form, receiving the request, validating user input, creating the ticket,
sending the confirmation mail and displaying the confirmation page, on the other hand, is quite a
complex process.</p>

<p>But testing it through selenium is hard and, if you run into the trap of recording your test cases,
very prone to changes of the underlying software.</p>

<p>Using Page Driven Play 2.0 Functional Tests provided by funcy, you can</p>

<ul>
<li>write your tests as simple unit tests</li>
<li>check results by accessing resulting web page DOMs or the database directly</li>
<li>run them very fast against an in-memory database.</li>
</ul>


<p>Consider this example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testBooking</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">IndexPage</span> <span class="n">indexPage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IndexPage</span><span class="o">();</span>
</span><span class='line'>  <span class="n">EventPage</span> <span class="n">eventPage</span> <span class="o">=</span> <span class="n">indexPage</span><span class="o">.</span><span class="na">clickEvent</span><span class="o">(</span><span class="s">&quot;Sidney Opera&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">BookingPage</span> <span class="n">bookingPage</span> <span class="o">=</span> <span class="n">eventPage</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="s">&quot;2012/05/07&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ConfirmationPage</span> <span class="n">confirmationPage</span> <span class="o">=</span> <span class="n">bookingPage</span><span class="o">.</span><span class="na">book</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Booking</span><span class="o">&gt;</span> <span class="n">bookings</span> <span class="o">=</span> <span class="n">Booking</span><span class="o">.</span><span class="na">all</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">&quot;#bookings&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="n">bookings</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't use amend with heroku]]></title>
    <link href="http://joergviola.github.com/blog/2012/05/27/dont-use-amend-with-heroku/"/>
    <updated>2012-05-27T13:11:00+02:00</updated>
    <id>http://joergviola.github.com/blog/2012/05/27/dont-use-amend-with-heroku</id>
    <content type="html"><![CDATA[<p>I forgot to add a new file in a git commit (since I did not refresh my eclipse workspace).
That caused a little surprise on the next release.</p>

<!-- more -->


<p>When trying to release to heroku the next time, I was told:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push <span class="nb">test </span>master
</span><span class='line'>To git@heroku.com:test-66and33.git
</span><span class='line'> ! <span class="o">[</span>rejected<span class="o">]</span>        master -&gt; master <span class="o">(</span>non-fast-forward<span class="o">)</span>
</span><span class='line'>error: failed to push some refs to <span class="s1">&#39;git@heroku.com:test-66and33.git&#39;</span>
</span><span class='line'>To prevent you from losing <span class="nb">history</span>, non-fast-forward updates were rejected
</span><span class='line'>Merge the remote changes <span class="o">(</span>e.g. <span class="s1">&#39;git pull&#39;</span><span class="o">)</span> before pushing again.  See the
</span><span class='line'><span class="s1">&#39;Note about fast-forwards&#39;</span> section of <span class="s1">&#39;git push --help&#39;</span> <span class="k">for </span>details.
</span></code></pre></td></tr></table></div></figure>


<p>I learned from <a href="http://stackoverflow.com/questions/3968281/git-pushing-amended-commits">Stackoverflow</a>
that after amending a commit, you have to force the next push:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push <span class="nb">test </span>master --force
</span></code></pre></td></tr></table></div></figure>


<p>Conclusion from SO: Don&#8217;t amend!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A PDF module for Play 2.0 Java]]></title>
    <link href="http://joergviola.github.com/blog/2012/05/18/a-pdf-module-for-play-2-dot-0-java/"/>
    <updated>2012-05-18T23:48:00+02:00</updated>
    <id>http://joergviola.github.com/blog/2012/05/18/a-pdf-module-for-play-2-dot-0-java</id>
    <content type="html"><![CDATA[<p>Yup! I just created my first Play 2.0 module!
A lot of thanks to Steve for his tips for <a href="http://www.objectify.be/wordpress/?p=363">creating a module</a>
and <a href="http://www.objectify.be/wordpress/?p=410">publishing it on github pages</a>.</p>

<p>So finally here is a preliminary release of my PDF module.
It helps in generating PDF documents dynamically.
You simply create standard Play 2.0 html templates and render them as HTML.</p>

<!-- more -->


<p>As an example, see <a href="https://github.com/joergviola/play20-pdf/blob/master/samples/pdf-sample/app/views/document.scala.html">this template</a>:</p>

<figure class='code'><figcaption><span>document.scala.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(message: String)
</span><span class='line'>
</span><span class='line'>@main(&quot;Welcome to Play 2.0&quot;) {
</span><span class='line'>    Image: <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/public/images/favicon.png&quot;</span><span class="nt">/&gt;&lt;br/&gt;</span>
</span><span class='line'>    Hello world! <span class="nt">&lt;br/&gt;</span>
</span><span class='line'>    @message <span class="nt">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>1<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>2<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>3<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>4<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, it follows some simple rules:</p>

<ul>
<li>use XHTML</li>
<li>specify external links as filepathes into the classpath of your application.</li>
</ul>


<p>Then this template can simply be rendered as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Result</span> <span class="nf">document</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">PDF</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">document</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Your new application is ready.&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
where <code>PDF.ok</code> is a simple shorthand notation for:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ok</span><span class="o">(</span><span class="n">PDF</span><span class="o">.</span><span class="na">toBytes</span><span class="o">(</span><span class="n">document</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="s">&quot;Your new application is ready.&quot;</span><span class="o">))).</span><span class="na">as</span><span class="o">(</span><span class="s">&quot;application/pdf&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to use that module, simply add to your Build.scala these lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">appDependencies</span> <span class="o">=</span> <span class="n">Seq</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;pdf&quot;</span> <span class="o">%</span> <span class="s">&quot;pdf_2.9.1&quot;</span> <span class="o">%</span> <span class="s">&quot;0.2&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="n">val</span> <span class="n">main</span> <span class="o">=</span> <span class="n">PlayProject</span><span class="o">(</span><span class="n">appName</span><span class="o">,</span> <span class="n">appVersion</span><span class="o">,</span> <span class="n">appDependencies</span><span class="o">,</span> <span class="n">mainLang</span> <span class="o">=</span> <span class="n">JAVA</span><span class="o">,</span> <span class="n">settings</span> <span class="o">=</span> <span class="n">s</span><span class="o">).</span><span class="na">settings</span><span class="o">(</span>
</span><span class='line'>      <span class="n">resolvers</span> <span class="o">+=</span> <span class="n">Resolver</span><span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="s">&quot;My GitHub Play Repository&quot;</span><span class="o">,</span> <span class="n">url</span><span class="o">(</span><span class="s">&quot;http://www.joergviola.de/releases/&quot;</span><span class="o">))(</span><span class="n">Resolver</span><span class="o">.</span><span class="na">ivyStylePatterns</span><span class="o">),</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/joergviola/play20-pdf">&#8230;and the Source is with You!</a></p>

<p>I am just starting to use this module, so I don&#8217;t know how limited XHTML and CSS usage is.
Just let me know in the comments - thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Scala templates rock]]></title>
    <link href="http://joergviola.github.com/blog/2012/05/12/why-scala-templates-rock/"/>
    <updated>2012-05-12T18:19:00+02:00</updated>
    <id>http://joergviola.github.com/blog/2012/05/12/why-scala-templates-rock</id>
    <content type="html"><![CDATA[<p>Play 2.0 uses Scala for HTML templates.
They are checked at compile-time, so you never again get ghostly errors in production
due to unforeseen situations.</p>

<p>But besides that, you can do other great things with ease.
Using a practical application of Scala functions for list pagination, for example.</p>

<!-- more -->


<h2>Pagination with EBean</h2>

<p>The EBean ORM used by Play 2.0 provides tools for very simply querying for paginated lists.
Since our web application is about seminars, we have e.g. this accessor for top rated seminars:</p>

<figure class='code'><figcaption><span>Seminar.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Page</span><span class="o">&lt;</span><span class="n">Seminar</span><span class="o">&gt;</span> <span class="n">top</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">,</span> <span class="kt">int</span> <span class="n">page</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">find</span><span class="o">.</span><span class="na">where</span><span class="o">().</span><span class="na">orderBy</span><span class="o">(</span><span class="s">&quot;rating desc&quot;</span><span class="o">)</span>
</span><span class='line'>         <span class="o">.</span><span class="na">findPagingList</span><span class="o">(</span><span class="n">size</span><span class="o">).</span><span class="na">getPage</span><span class="o">(</span><span class="n">page</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
This can be used by our <code>Publics</code> controller to render a page of top rated seminars:</p>

<figure class='code'><figcaption><span>Publics.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Result</span> <span class="nf">top</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">ok</span><span class="o">(</span><span class="n">top</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">Seminar</span><span class="o">.</span><span class="na">top</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">page</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The template for rendering this list is very simple:</p>

<figure class='code'><figcaption><span>top.scala.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(seminars : Page[Seminar])
</span><span class='line'>
</span><span class='line'>@for(seminar <span class="err">&lt;</span>- seminars.getList){
</span><span class='line'>  @seminarInList(seminar)
</span><span class='line'>} 
</span></code></pre></td></tr></table></div></figure>


<p>and pagination is added equally simple:</p>

<figure class='code'><figcaption><span>seminarList.scala.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@if(seminars.getTotalPageCount&gt;1){
</span><span class='line'>    @if(seminars.hasPrev) {
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;@routes.Publics.top(seminars.getPageIndex - 1)&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;larr;</span><span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    } else {
</span><span class='line'>        <span class="ni">&amp;larr;</span>
</span><span class='line'>    }
</span><span class='line'>    @for(p <span class="err">&lt;</span>- 1 to page.getTotalPageCount) {
</span><span class='line'>      @if(p-1==seminars.getPageIndex) {
</span><span class='line'>          @p
</span><span class='line'>      } else {
</span><span class='line'>          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;@routes.Publics.top(p-1)&quot;</span><span class="nt">&gt;</span>@p<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>    @if(seminars.hasNext) {
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;@routes.Publics.top(seminars.getPageIndex + 1)&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;rarr;</span><span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    } else {
</span><span class='line'>        <span class="ni">&amp;rarr;</span>
</span><span class='line'>    }
</span><span class='line'>} 
</span></code></pre></td></tr></table></div></figure>


<h2>Add flexibility with Scala functions</h2>

<p>As you can image, we have all kind of seminar lists: Top rated, newest, in one category and so on.
We would of course very much like to have a sub-template capable of rendering any list of seminars.
But the pagination links then have to be customized.</p>

<p>This can be done easily using Scala functions:
The method of the router representing the link in Scala reads <code>routes.Publics.top(page:Int):Call</code>.
Applying the Scala wildcard <code>_</code> to it like in <code>routes.Publics.top(_)</code> creates a Scala function
mapping an Int to a Call: <code>Int =&gt; Call</code>. Functions of this type are exactly the parameters we want to have
in a generalized seminar list template:</p>

<figure class='code'><figcaption><span>seminarList.scala.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(seminars : Page[Seminar], link: Int =&gt; Call)
</span><span class='line'>
</span><span class='line'>@for(seminar <span class="err">&lt;</span>- seminars.getList){
</span><span class='line'>  @seminarInList(seminar)
</span><span class='line'>} 
</span></code></pre></td></tr></table></div></figure>


<p>because the pagination can then make simple use of it:</p>

<figure class='code'><figcaption><span>seminarList.scala.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@if(seminars.getTotalPageCount&gt;1){
</span><span class='line'>    @if(seminars.hasPrev) {
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;@link(seminars.getPageIndex - 1)&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;larr;</span><span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    } else {
</span><span class='line'>        <span class="ni">&amp;larr;</span>
</span><span class='line'>    }
</span><span class='line'>    @for(p <span class="err">&lt;</span>- 1 to page.getTotalPageCount) {
</span><span class='line'>      @if(p-1==seminars.getPageIndex) {
</span><span class='line'>          @p
</span><span class='line'>      } else {
</span><span class='line'>          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;@link(p-1)&quot;</span><span class="nt">&gt;</span>@p<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>    @if(seminars.hasNext) {
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;@link(seminars.getPageIndex + 1)&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;rarr;</span><span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    } else {
</span><span class='line'>        <span class="ni">&amp;rarr;</span>
</span><span class='line'>    }
</span><span class='line'>} 
</span></code></pre></td></tr></table></div></figure>


<p>This sub-template can then simply be called like:</p>

<figure class='code'><figcaption><span>top.scala.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@seminarList(top, routes.Publics.top(_)) 
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span>newest.scala.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@seminarList(newest, routes.Publics.news(_)) 
</span></code></pre></td></tr></table></div></figure>


<p>Scala templates rock!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrading to Play 2.0.1]]></title>
    <link href="http://joergviola.github.com/blog/2012/05/11/upgrading-to-play-2-dot-0-1/"/>
    <updated>2012-05-11T08:31:00+02:00</updated>
    <id>http://joergviola.github.com/blog/2012/05/11/upgrading-to-play-2-dot-0-1</id>
    <content type="html"><![CDATA[<p>Play 2.0.1 is here!
Learn how to upgrade and what to gain.</p>

<!-- more -->


<h2>What to gain</h2>

<p><a href="https://groups.google.com/forum/?fromgroups#!searchin/play-framework/2.0.1$20is$20ready/play-framework/XtJk-LFBtCw/uIqCZxpzG-wJ">Here</a>
is the announcement.</p>

<p>For me, the following enhancements are important:</p>

<ul>
<li>EBean enhancement seems to be fixed - no enhancement errors until now.</li>
<li>more efficient sbt dependency check - the number of files that are compiled after a change
seems to have been reduced. That improves turn-around speed a lot.</li>
</ul>


<h2>How to upgrade</h2>

<ol>
<li>Download <a href="http://download.playframework.org/releases/play-2.0.1.zip">Play 2.0.1</a></li>
<li>Unzip and move to $SOMEDIR/play-2.0.1</li>
<li>Add to $PATH: $SOMEDIR/play-2.0.1, removing your play-2.0-setting</li>
<li><p>Update project/plugins.sbt to include</p>

<pre><code> addSbtPlugin("play" % "sbt-plugin" % "2.0.1")
</code></pre></li>
<li><p>If you had tweaked your Build.scala to path the ebean enhancement, reset it to something like the following:</p>

<pre><code> import sbt._
 import Keys._
 import PlayProject._

 object ApplicationBuild extends Build {

     val appName         = "66and33-web"
     val appVersion      = "1.0-SNAPSHOT"

     val appDependencies = Seq(
       "postgresql" % "postgresql" % "8.4-702.jdbc4"
     )
     val main = PlayProject(appName, appVersion, appDependencies, mainLang = JAVA).settings(
             templatesImport += "util._"
     )

 }
</code></pre></li>
<li><p>run <code>play eclipsify</code></p></li>
<li>as in 2.0, tweak the generated project by

<ol>
<li>removing the output folders on the source folders ./app and ./test. The effectively tells eclipse to compile into ./bin
which does not interfere with the sbt compilation</li>
<li>add target/scala-2.9.1/classes to your build path. This allows access e.g. to the ReverseControllers</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple website search with Lucene?]]></title>
    <link href="http://joergviola.github.com/blog/2012/05/09/simple-website-search-with-lucene/"/>
    <updated>2012-05-09T18:38:00+02:00</updated>
    <id>http://joergviola.github.com/blog/2012/05/09/simple-website-search-with-lucene</id>
    <content type="html"><![CDATA[<p>Have you ever tried to implement search in your web app?
Should be easy, eh?
And of course you want:</p>

<ul>
<li>To search in all text-fields of nearly all entities in your model</li>
<li>To get suggestions while the user types the query</li>
<li>To have the query term highlighted in the search results.</li>
<li>Update the index as the model changes</li>
</ul>


<p>Since these requirements seem fairly basic, I was surprised how complicated
they were to implement and how little documented.</p>

<!-- more -->


<h2>Multi-field search</h2>

<p>Indexing documents is easy, really. Simply:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">IndexWriter</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IndexWriter</span><span class="o">(</span><span class="n">directory</span><span class="o">,</span> <span class="n">config</span><span class="o">);</span>
</span><span class='line'><span class="n">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Document</span><span class="o">();</span>
</span><span class='line'><span class="n">doc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Field</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">,</span> <span class="n">model</span><span class="o">.</span><span class="na">title</span><span class="o">,</span> <span class="n">Field</span><span class="o">.</span><span class="na">Store</span><span class="o">.</span><span class="na">YES</span><span class="o">,</span><span class="n">Field</span><span class="o">.</span><span class="na">Index</span><span class="o">.</span><span class="na">ANALYZED</span><span class="o">));</span>
</span><span class='line'><span class="n">doc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Field</span><span class="o">(</span><span class="s">&quot;text&quot;</span><span class="o">,</span> <span class="n">model</span><span class="o">.</span><span class="na">text</span><span class="o">,</span> <span class="n">Field</span><span class="o">.</span><span class="na">Store</span><span class="o">.</span><span class="na">YES</span><span class="o">,</span><span class="n">Field</span><span class="o">.</span><span class="na">Index</span><span class="o">.</span><span class="na">ANALYZED</span><span class="o">));</span>
</span><span class='line'><span class="n">w</span><span class="o">.</span><span class="na">addDocument</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
</span><span class='line'><span class="n">w</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>But when it comes to search for a phrase in all of these fields, things become
a little involved like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">FIELDS</span> <span class="o">=</span> <span class="o">{</span> <span class="s">&quot;title&quot;</span><span class="o">,</span> <span class="s">&quot;text&quot;</span> <span class="o">};</span>
</span><span class='line'><span class="n">MultiFieldQueryParser</span> <span class="n">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MultiFieldQueryParser</span><span class="o">(</span>
</span><span class='line'>      <span class="n">Version</span><span class="o">.</span><span class="na">LUCENE_36</span><span class="o">,</span> <span class="n">FIELDS</span><span class="o">,</span> <span class="n">STANDARD_ANALYZER</span><span class="o">);</span>
</span><span class='line'><span class="n">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">q</span> <span class="o">+</span> <span class="s">&quot;*&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">hitsPerPage</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'><span class="n">IndexReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">IndexReader</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">directory</span><span class="o">);</span>
</span><span class='line'><span class="n">IndexSearcher</span> <span class="n">searcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IndexSearcher</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
</span><span class='line'><span class="n">TopScoreDocCollector</span> <span class="n">collector</span> <span class="o">=</span> <span class="n">TopScoreDocCollector</span><span class="o">.</span><span class="na">create</span><span class="o">(</span>
</span><span class='line'>      <span class="n">hitsPerPage</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="n">searcher</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="n">collector</span><span class="o">);</span>
</span><span class='line'><span class="n">ScoreDoc</span><span class="o">[]</span> <span class="n">hits</span> <span class="o">=</span> <span class="n">collector</span><span class="o">.</span><span class="na">topDocs</span><span class="o">().</span><span class="na">scoreDocs</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">hits</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">docId</span> <span class="o">=</span> <span class="n">hits</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">doc</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Document</span> <span class="n">document</span> <span class="o">=</span> <span class="n">searcher</span><span class="o">.</span><span class="na">doc</span><span class="o">(</span><span class="n">docId</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">// Do something with it!</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Suggestions</h2>

<p>I could not yet figure that out, honestly!</p>

<h2>Highlighting</h2>

<p>After having retrieved the document, don&#8217;t simply call e.g. <code>document.get("text")</code>, but:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">TermPositionVector</span> <span class="n">termPosVector</span> <span class="o">=</span> <span class="o">(</span><span class="n">TermPositionVector</span><span class="o">)</span> <span class="n">searcher</span>
</span><span class='line'>      <span class="o">.</span><span class="na">getIndexReader</span><span class="o">().</span><span class="na">getTermFreqVector</span><span class="o">(</span><span class="n">docId</span><span class="o">,</span> <span class="s">&quot;text&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">TokenStream</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">TokenSources</span><span class="o">.</span><span class="na">getTokenStream</span><span class="o">(</span><span class="n">termPosVector</span><span class="o">);</span>
</span><span class='line'><span class="n">QueryScorer</span> <span class="n">scorer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QueryScorer</span><span class="o">(</span><span class="n">query</span><span class="o">);</span>
</span><span class='line'><span class="n">Fragmenter</span> <span class="n">fragmenter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleSpanFragmenter</span><span class="o">(</span><span class="n">scorer</span><span class="o">,</span> <span class="mi">10000</span><span class="o">);</span>
</span><span class='line'><span class="n">Highlighter</span> <span class="n">highlighter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Highlighter</span><span class="o">(</span><span class="n">scorer</span><span class="o">);</span>
</span><span class='line'><span class="n">highlighter</span><span class="o">.</span><span class="na">setTextFragmenter</span><span class="o">(</span><span class="n">fragmenter</span><span class="o">);</span>
</span><span class='line'><span class="n">highlighter</span><span class="o">.</span><span class="na">setMaxDocCharsToAnalyze</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">frag</span> <span class="o">=</span> <span class="n">highlighter</span><span class="o">.</span><span class="na">getBestFragments</span><span class="o">(</span><span class="n">stream</span><span class="o">,</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;text&quot;</span><span class="o">),</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">frag</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">frag</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fieldContents</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since this assumes the Terms to be stored in the index, you must index the attribute as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">doc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Field</span><span class="o">(</span><span class="s">&quot;text&quot;</span><span class="o">,</span> <span class="n">seminar</span><span class="o">.</span><span class="na">text</span><span class="o">,</span> <span class="n">Field</span><span class="o">.</span><span class="na">Store</span><span class="o">.</span><span class="na">YES</span><span class="o">,</span>
</span><span class='line'>      <span class="n">Field</span><span class="o">.</span><span class="na">Index</span><span class="o">.</span><span class="na">ANALYZED</span><span class="o">,</span> <span class="n">Field</span><span class="o">.</span><span class="na">TermVector</span><span class="o">.</span><span class="na">WITH_POSITIONS_OFFSETS</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Updating the index</h2>

<p>Maybe you do want to update your index whenever a model changes.
Using Play 2.0, I have overwritten the save() and update() methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Search</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>      <span class="n">Search</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">Search</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>using these methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">IndexWriter</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IndexWriter</span><span class="o">(</span><span class="n">directory</span><span class="o">,</span> <span class="n">config</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">createDocument</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
</span><span class='line'>  <span class="n">w</span><span class="o">.</span><span class="na">addDocument</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
</span><span class='line'>  <span class="n">w</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">IndexWriter</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IndexWriter</span><span class="o">(</span><span class="n">directory</span><span class="o">,</span> <span class="n">config</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">createDocument</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Term</span> <span class="n">term</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Term</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="na">state</span> <span class="o">!=</span> <span class="n">model</span><span class="o">.</span><span class="na">State</span><span class="o">.</span><span class="na">Approved</span><span class="o">)</span>
</span><span class='line'>      <span class="n">w</span><span class="o">.</span><span class="na">deleteDocuments</span><span class="o">(</span><span class="n">term</span><span class="o">);</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">w</span><span class="o">.</span><span class="na">updateDocument</span><span class="o">(</span><span class="n">term</span><span class="o">,</span> <span class="n">doc</span><span class="o">);</span>
</span><span class='line'>  <span class="n">w</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So here another field id is used to find the document in the index. But beware! Don&#8217;t analyze this field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">doc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Field</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="s">&quot;Model:&quot;</span> <span class="o">+</span> <span class="n">model</span><span class="o">.</span><span class="na">id</span><span class="o">,</span> <span class="n">Field</span><span class="o">.</span><span class="na">Store</span><span class="o">.</span><span class="na">YES</span><span class="o">,</span>
</span><span class='line'>      <span class="n">Field</span><span class="o">.</span><span class="na">Index</span><span class="o">.</span><span class="na">NOT_ANALYZED</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JQuery UI Tools - UI Toolkit for Dummies]]></title>
    <link href="http://joergviola.github.com/blog/2012/05/06/jquery-ui-tools-ui-toolkit-for-dummies/"/>
    <updated>2012-05-06T21:35:00+02:00</updated>
    <id>http://joergviola.github.com/blog/2012/05/06/jquery-ui-tools-ui-toolkit-for-dummies</id>
    <content type="html"><![CDATA[<p>Interesting in fancy tabs, tooltips or overlays? -</p>

<p>Take a look at <a href="http://jquerytools.org/">JQuery UI Tools</a></p>

<!-- more -->


<h2>Tooltip</h2>

<p>Simply insert the tooltip right after the trigger element:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;tip&quot;</span> <span class="na">href=</span><span class="s">&quot;...&quot;</span><span class="nt">&gt;</span>Press here<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tooltip&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  This is my tip...
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>activate it after page load:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.tip&#39;</span><span class="p">).</span><span class="nx">tooltip</span><span class="p">({</span> <span class="nx">position</span><span class="o">:</span> <span class="s2">&quot;bottom center&quot;</span><span class="p">,</span> <span class="nx">predelay</span><span class="o">:</span> <span class="mi">500</span><span class="p">,</span> <span class="nx">effect</span><span class="o">:</span> <span class="s1">&#39;fade&#39;</span><span class="p">,</span> <span class="nx">fadeInSpeed</span><span class="o">:</span><span class="mi">1000</span> <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and style it in your css (or LESS, if that matters ;-):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.tooltip</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span><span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">250px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span><span class="nb">white</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">4px</span> <span class="o">@</span><span class="nb">orange</span> <span class="k">solid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span><span class="m">#000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Overlay</h2>

<p>Link the overlay to the trigger element using <code>rel</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;pointer&quot;</span> <span class="na">rel=</span><span class="s">&quot;#preview&quot;</span><span class="nt">&gt;</span>Press this!<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;preview&quot;</span> <span class="na">class=</span><span class="s">&quot;overlay&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Lightbox-Content goes here...
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>activate it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a[rel]&#39;</span><span class="p">).</span><span class="nx">overlay</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and, again, add some style:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.overlay</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span><span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">z-index</span><span class="o">:</span><span class="m">10000</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span><span class="m">#fff</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">4px</span> <span class="k">solid</span> <span class="o">@</span><span class="nb">orange</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.overlay</span> <span class="nc">.close</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-image</span><span class="o">:</span><span class="sx">url(/assets/images/close.png)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span><span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">right</span><span class="o">:-</span><span class="m">15px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">top</span><span class="o">:-</span><span class="m">15px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">cursor</span><span class="o">:</span><span class="k">pointer</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span><span class="m">35px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span><span class="m">35px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>as well as this close button:
<img class="right" src="http://joergviola.github.com/images/close.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala pearls for a dummy]]></title>
    <link href="http://joergviola.github.com/blog/2012/05/06/scala-pearls-for-a-dummy/"/>
    <updated>2012-05-06T11:33:00+02:00</updated>
    <id>http://joergviola.github.com/blog/2012/05/06/scala-pearls-for-a-dummy</id>
    <content type="html"><![CDATA[<p>After migrating to Play 2.0, being convinced one can use it with Java alone,
I was curious enough to take a look at the Scala side of it.
Read about some nice little discoverings of a scla beginner.</p>

<!-- more -->


<p>Of course, the first contact happens in Play 2.0 templates:</p>

<h2>Typesafe</h2>

<p>Templates have a signature, types are behind names and type parameters use square brackets.
Thus the first line in every template reads like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(state:State, users:List[User])
</span></code></pre></td></tr></table></div></figure>


<h2>Looping</h2>

<p>It is simple to loop over any collection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@for(user <span class="err">&lt;</span>- users) {
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;@routes.Publics.user(user.id)&quot;</span><span class="nt">&gt;</span>@user.name<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>The cool thing is, you don&#8217;t need any template extension or whatever to get the looping index.
And you have tuples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@for((user,index) <span class="err">&lt;</span>- users.zipWithIndex) {
</span><span class='line'>  @if(index&gt;0){
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;seperator&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  }
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;@routes.Publics.user(user.id)&quot;</span><span class="nt">&gt;</span>@index. @user.name<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>And - you have functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@users.zipWithIndex.foreach { (user, index) =&gt;
</span><span class='line'>  @if(index&gt;0){
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;seperator&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  }
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;@routes.Publics.user(user.id)&quot;</span><span class="nt">&gt;</span>@index. @user.name<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;select</span> <span class="na">name=</span><span class="s">&quot;@name&quot;</span> <span class="na">multiple=</span><span class="s">&quot;multiple&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    @options.map { v =&gt;
</span><span class='line'>        <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;@v._1&quot;</span> <span class="err">@(</span><span class="na">if</span><span class="err">(</span><span class="na">v</span><span class="err">.</span><span class="na">_3</span><span class="err">)</span> <span class="err">&quot;</span><span class="na">selected</span><span class="err">&quot;</span> <span class="na">else</span> <span class="err">&quot;&quot;)</span><span class="nt">&gt;</span>@v._2<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>    }
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Did you ever require a String representation of a list?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">columns</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="s">&quot;&lt;td&gt;&quot;</span> <span class="o">+</span> <span class="k">_</span> <span class="o">+</span> <span class="s">&quot;&lt;/td&gt;&quot;</span><span class="o">).</span><span class="n">mkString</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Filtering</h2>

<p>Imagine you were to get all Fields of a class with the annotation @Id. Here is the java code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Field</span><span class="o">&gt;</span> <span class="n">idFields</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Field</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Field</span><span class="o">&gt;();</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">f</span> <span class="o">:</span> <span class="n">c</span><span class="o">.</span><span class="na">getFields</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">Id</span><span class="o">.</span><span class="na">class</span><span class="o">)!=</span><span class="kc">null</span><span class="o">)</span>
</span><span class='line'>              <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and this is scala:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">idFields</span><span class="o">(</span><span class="n">c</span><span class="k">:</span> <span class="kt">Class</span><span class="o">[</span><span class="k">_</span> <span class="k">&lt;:</span> <span class="kt">Any</span><span class="o">])</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Field</span><span class="o">]</span> <span class="k">=</span> <span class="n">c</span><span class="o">.</span><span class="n">getFields</span><span class="o">().</span><span class="n">toSeq</span> <span class="n">filter</span> <span class="o">{</span> <span class="n">f</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">getAnnotation</span><span class="o">(</span><span class="n">classOf</span><span class="o">[</span><span class="kt">Id</span><span class="o">])</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Case classes</h2>

<p>Talking about shortness:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Date</span> <span class="n">birthday</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">gender</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">,</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">,</span> <span class="n">Date</span> <span class="n">birthday</span><span class="o">,</span>
</span><span class='line'>          <span class="kt">boolean</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">birthday</span> <span class="o">=</span> <span class="n">birthday</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getFirstName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFirstName</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getLastName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLastName</span><span class="o">(</span><span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Date</span> <span class="nf">getBirthday</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">birthday</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBirthday</span><span class="o">(</span><span class="n">Date</span> <span class="n">birthday</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">birthday</span> <span class="o">=</span> <span class="n">birthday</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isGender</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">gender</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGender</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="kt">int</span> <span class="n">prime</span> <span class="o">=</span> <span class="mi">31</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span>
</span><span class='line'>              <span class="o">+</span> <span class="o">((</span><span class="n">birthday</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">birthday</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span>
</span><span class='line'>              <span class="o">+</span> <span class="o">((</span><span class="n">firstName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">firstName</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="o">(</span><span class="n">gender</span> <span class="o">?</span> <span class="mi">1231</span> <span class="o">:</span> <span class="mi">1237</span><span class="o">);</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span>
</span><span class='line'>              <span class="o">+</span> <span class="o">((</span><span class="n">lastName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">lastName</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">obj</span><span class="o">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Person</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">Person</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">birthday</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">birthday</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">birthday</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">birthday</span><span class="o">))</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">firstName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">firstName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">firstName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">firstName</span><span class="o">))</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">gender</span> <span class="o">!=</span> <span class="n">other</span><span class="o">.</span><span class="na">gender</span><span class="o">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">lastName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">lastName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">lastName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">lastName</span><span class="o">))</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>is equivalent to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Person</span><span class="o">(</span><span class="k">val</span> <span class="n">firstName</span><span class="k">:</span><span class="kt">String</span><span class="o">,</span> <span class="n">lastName</span><span class="k">:</span><span class="kt">String</span><span class="o">,</span> <span class="n">birthday</span><span class="k">:</span><span class="kt">Date</span><span class="o">,</span> <span class="n">gender</span><span class="k">:</span><span class="kt">boolean</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Built-in singletons</h2>

<p>No static methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Person</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>     <span class="o">...</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">person</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>is equivalent to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Person</span><span class="o">(</span><span class="k">val</span> <span class="n">firstName</span><span class="k">:</span><span class="kt">String</span><span class="o">,</span> <span class="n">lastName</span><span class="k">:</span><span class="kt">String</span><span class="o">,</span> <span class="n">birthday</span><span class="k">:</span><span class="kt">Date</span><span class="o">,</span> <span class="n">gender</span><span class="k">:</span><span class="kt">boolean</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">object</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">def</span> <span class="n">create</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Traits</h2>

<p>Not yet used them, though they look cool!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Securing a whole app with Basic Auth]]></title>
    <link href="http://joergviola.github.com/blog/2012/05/05/securing-a-whole-app-with-basic-auth/"/>
    <updated>2012-05-05T10:50:00+02:00</updated>
    <id>http://joergviola.github.com/blog/2012/05/05/securing-a-whole-app-with-basic-auth</id>
    <content type="html"><![CDATA[<p>Our game-changing new app went to heroku for user tests.
Currently it is in a closed test phase.
(Lean startup enthusiast? - Me too, I&#8217;ll love to discuss why we&#8217;re doing that).
Learn how simple it is to Basic-Auth a whole Play App!</p>

<!-- more -->


<p>So I had to put a simple basic auth in front of it.
Well, simple with Play 2.0:</p>

<div><script src='https://gist.github.com/2594860.js?file='></script>
<noscript><pre><code>public class Global extends GlobalSettings {

    @Override
    public Action onRequest(Request arg0, Method arg1) {
        return new Action.Simple() {
            public Result call(Context ctx) throws Throwable {
                String authConf = Config.getString(&quot;basic.auth&quot;);
                if (authConf == null)
                    return delegate.call(ctx);
                String auth = ctx.request().getHeader(&quot;Authorization&quot;);
                if (auth == null)
                    return authorize(ctx);
                String[] comps = auth.split(&quot; &quot;);
                if (comps.length != 2)
                    return authorize(ctx);
                if (!&quot;Basic&quot;.equals(comps[0]))
                    return authorize(ctx);
                BASE64Decoder decoder = new sun.misc.BASE64Decoder();
                String credentials = new String(decoder.decodeBuffer(comps[1]));
                if (authConf.equals(credentials))
                    return delegate.call(ctx);
                return authorize(ctx);
            }

            private Result authorize(Context ctx) {
                ctx.response().setHeader(&quot;WWW-Authenticate&quot;,
                        &quot;Basic realm=\&quot;Secure-Me\&quot;&quot;);
                return unauthorized();
            }
        };
    }
}
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging on GitHub with Octopress]]></title>
    <link href="http://joergviola.github.com/blog/2012/05/05/blogging-on-github-with-octopress/"/>
    <updated>2012-05-05T10:10:00+02:00</updated>
    <id>http://joergviola.github.com/blog/2012/05/05/blogging-on-github-with-octopress</id>
    <content type="html"><![CDATA[<p>I already knew I could publish a static site from github.
Well, I was impressed how simple it is to publish a fully functional blog using
<a href="http://github.com/mojombo/jekyll">jekyll</a> or, even simpler, <a href="http://octopress.org/">Octopress</a>.</p>

<!-- more -->


<p>I do demonstrate some capabilities here.
You can access the source of this page
<a href="https://raw.github.com/joergviola/joergviola.github.com/source/source/_posts/2012-05-05-blogging-on-github-with-octopress.markdown">here</a>.</p>

<h2>A caption</h2>

<p>This is a test:</p>

<ul>
<li>Of a
very lazily written
unordered list</li>
<li>with a second item</li>
</ul>


<p>Here comes some text</p>

<ol>
<li>well, numbered</li>
<li>lists I seem to have understood now (you must seperate them from unordered lists by some text)</li>
</ol>


<p>I had a problem during install reading</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sam:octopress viola<span class="nv">$ </span>rake setup_github_pages
</span><span class='line'>rake aborted!
</span><span class='line'>You have already activated rake 0.9.2.2, but your Gemfile requires rake 0.9.2. Using bundle <span class="nb">exec </span>may solve this.
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
So I built several helper scripts, the longest being</p>

<figure class='code'><figcaption><span>deploy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>rake generate
</span><span class='line'>bundle <span class="nb">exec </span>rake deploy
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<div><script src='https://gist.github.com/2594860.js?file='></script>
<noscript><pre><code>public class Global extends GlobalSettings {

    @Override
    public Action onRequest(Request arg0, Method arg1) {
        return new Action.Simple() {
            public Result call(Context ctx) throws Throwable {
                String authConf = Config.getString(&quot;basic.auth&quot;);
                if (authConf == null)
                    return delegate.call(ctx);
                String auth = ctx.request().getHeader(&quot;Authorization&quot;);
                if (auth == null)
                    return authorize(ctx);
                String[] comps = auth.split(&quot; &quot;);
                if (comps.length != 2)
                    return authorize(ctx);
                if (!&quot;Basic&quot;.equals(comps[0]))
                    return authorize(ctx);
                BASE64Decoder decoder = new sun.misc.BASE64Decoder();
                String credentials = new String(decoder.decodeBuffer(comps[1]));
                if (authConf.equals(credentials))
                    return delegate.call(ctx);
                return authorize(ctx);
            }

            private Result authorize(Context ctx) {
                ctx.response().setHeader(&quot;WWW-Authenticate&quot;,
                        &quot;Basic realm=\&quot;Secure-Me\&quot;&quot;);
                return unauthorized();
            }
        };
    }
}
</code></pre></noscript></div>


<p><a href="http://disqus.com">a link</a></p>

<hr />
]]></content>
  </entry>
  
</feed>
